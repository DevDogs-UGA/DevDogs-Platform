generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model github_issues {
  id            String    @id
  user_id       String?
  status        String?
  title         String?
  complexity    Int?      @db.SmallInt
  quality       Int?      @db.SmallInt
  time_estimate Int?      @db.SmallInt
  designation   String?
  priority      Int?      @db.SmallInt
  numberOfUsers Int?
  closed        Boolean   @default(false)
  closed_at     DateTime? @db.Timestamp(6)
  closed_by     String?
  issue_number  Int
  points        points[]
}

model users {
  id          Int      @id @default(autoincrement())
  githubLogin String   @unique(map: "users_index_2")
  full_name   String
  admins      admins?
  points      points[]
}

model points {
  id            Int            @id @default(autoincrement())
  updated_at    DateTime       @default(now()) @db.Timestamp(6)
  points        Float?
  issue_id      String?
  user_id       Int?
  github_issues github_issues? @relation(fields: [issue_id], references: [id], onDelete: Cascade, map: "points_relation_1")
  users         users?         @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "points_relation_3")
}

model email_verification {
  id              Int      @id @default(autoincrement())
  created_at      DateTime @default(now()) @db.Timestamp(6)
  code            String   @db.VarChar(255)
  expireTimestamp DateTime @db.Timestamp(6)
  verified        Boolean  @default(false)
}

model refresh_token {
  userId        Int      @id
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  refresh_token String
  userInfo      userInfo @relation(fields: [userId], references: [id], onDelete: Cascade, map: "refresh_token_relation_1")
}

model userInfo {
  id            Int            @id @default(autoincrement())
  created_at    DateTime       @default(now()) @db.Timestamp(6)
  last_updated  DateTime       @default(now()) @db.Timestamp(6)
  first_name    String
  last_name     String?
  email_address String         @unique(map: "userInfo_index_2")
  password_hash String         @db.VarChar(128)
  salt          String         @db.VarChar(32)
  refresh_token refresh_token?
}

model admins {
  github_login String    @id
  term_start   DateTime  @db.Timestamp(6)
  term_end     DateTime? @db.Timestamp(6)
  users        users     @relation(fields: [github_login], references: [githubLogin], onDelete: Cascade, map: "admins_relation_1")
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}
